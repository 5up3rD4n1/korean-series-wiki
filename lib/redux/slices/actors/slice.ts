/* Core */
import { createSlice } from "@reduxjs/toolkit";
import { initialState } from "./state";
import { getActorsAsync, getActorsByIdAsync } from "./thunks";
import {
  getActorsFulfilledCaseReducer,
  getActorsPendingCaseReducer,
  getActorRejectedCaseReducer,
  getActorsByIdFulfilledCaseReducer,
  getActorsByIdPendingCaseReducer,
  getActorsByIdRejectedCaseReducer,
  addActorReducer,
} from "./reducers";

export const actorsSlice = createSlice({
  name: "actors",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    addActor: addActorReducer,
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      // GetSeries
      .addCase(getActorsAsync.pending, getActorsPendingCaseReducer)
      .addCase(getActorsAsync.fulfilled, getActorsFulfilledCaseReducer)
      .addCase(getActorsAsync.rejected, getActorRejectedCaseReducer)

      // GetSerieById
      .addCase(getActorsByIdAsync.pending, getActorsByIdPendingCaseReducer)
      .addCase(getActorsByIdAsync.fulfilled, getActorsByIdFulfilledCaseReducer)
      .addCase(getActorsByIdAsync.rejected, getActorsByIdRejectedCaseReducer);
  },
});

const actions = actorsSlice.actions;

export { actions };
