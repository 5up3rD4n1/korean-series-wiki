/* Core */
import { createSlice } from "@reduxjs/toolkit";
import { initialState } from "./state";
import {
  createActorAsync,
  getActorsAsync,
  getActorsByIdAsync,
  getActorsBySerieIdAsync,
} from "./thunks";
import {
  getActorsFulfilledCaseReducer,
  getActorsPendingCaseReducer,
  getActorRejectedCaseReducer,
  getActorsByIdFulfilledCaseReducer,
  getActorsByIdPendingCaseReducer,
  getActorsByIdRejectedCaseReducer,
  addActorReducer,
  createActorPendingCaseReducer,
  createActorFulfilledCaseReducer,
  createActorRejectedCaseReducer,
  getActorsBySerieIdPendingCaseReducer,
  getActorsBySerieIdFullfieldCaseReducer,
  getActorsBySerieIdRejectedCaseReducer,
} from "./reducers";

export const actorsSlice = createSlice({
  name: "actors",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    addActor: addActorReducer,
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      // GetActors
      .addCase(getActorsAsync.pending, getActorsPendingCaseReducer)
      .addCase(getActorsAsync.fulfilled, getActorsFulfilledCaseReducer)
      .addCase(getActorsAsync.rejected, getActorRejectedCaseReducer)

      // GetActorById
      .addCase(getActorsByIdAsync.pending, getActorsByIdPendingCaseReducer)
      .addCase(getActorsByIdAsync.fulfilled, getActorsByIdFulfilledCaseReducer)
      .addCase(getActorsByIdAsync.rejected, getActorsByIdRejectedCaseReducer)

      // CreateActor
      .addCase(createActorAsync.pending, createActorPendingCaseReducer)
      .addCase(createActorAsync.fulfilled, createActorFulfilledCaseReducer)
      .addCase(createActorAsync.rejected, createActorRejectedCaseReducer)

      // GetActorsBySerieId

      .addCase(
        getActorsBySerieIdAsync.pending,
        getActorsBySerieIdPendingCaseReducer
      )
      .addCase(
        getActorsBySerieIdAsync.fulfilled,
        getActorsBySerieIdFullfieldCaseReducer
      )
      .addCase(
        getActorsBySerieIdAsync.rejected,
        getActorsBySerieIdRejectedCaseReducer
      );
  },
});
