/* Core */
import { createSlice } from "@reduxjs/toolkit";
import { initialState } from "./state";
import { createAwardAsync, getAwards, getAwardsById } from "./thunks";
import {
  getAwardsFulfilledCaseReducer,
  getAwardsPendingCaseReducer,
  getAwardsRejectedCaseReducer,
  getAwardsByIdFulfilledCaseReducer,
  getAwardsByIdPendingCaseReducer,
  getAwardsByIdRejectedCaseReducer,
  addAwardReducer,
  createAwardPendingCaseReducer,
  createAwardFulfilledCaseReducer,
  createAwardRejectedCaseReducer,
} from "./reducers";

export const awardsSlice = createSlice({
  name: "awards",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    addAward: addAwardReducer,
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      // GetAwards
      .addCase(getAwards.pending, getAwardsPendingCaseReducer)
      .addCase(getAwards.fulfilled, getAwardsFulfilledCaseReducer)
      .addCase(getAwards.rejected, getAwardsRejectedCaseReducer)

      // GetAwardById
      .addCase(getAwardsById.pending, getAwardsByIdPendingCaseReducer)
      .addCase(getAwardsById.fulfilled, getAwardsByIdFulfilledCaseReducer)
      .addCase(getAwardsById.rejected, getAwardsByIdRejectedCaseReducer)

      // CreateAward
      .addCase(createAwardAsync.pending, createAwardPendingCaseReducer)
      .addCase(createAwardAsync.fulfilled, createAwardFulfilledCaseReducer)
      .addCase(createAwardAsync.rejected, createAwardRejectedCaseReducer);
  },
});
